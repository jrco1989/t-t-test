{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useAuth } from '../context/AuthContext';\nimport API_BASE_URL from '../config.js';\nconst useUserCodService = () => {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const getUserCods = async () => {\n    if (!token) {\n      throw new Error('No token available');\n    }\n    const response = await axios.get(`${API_BASE_URL}/user-cods/`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  };\n  return {\n    getUserCods\n  };\n};\n_s(useUserCodService, \"ZpOvj47KCDv4EW5BIUHQHDAsr3M=\", false, function () {\n  return [useAuth];\n});\nexport default useUserCodService;","map":{"version":3,"names":["axios","useAuth","API_BASE_URL","useUserCodService","_s","token","getUserCods","Error","response","get","headers","Authorization","data"],"sources":["/home/poly/projects/tyt/frontend-test-tyt/frontend-test/src/services/userCodService.js"],"sourcesContent":["import axios from 'axios';\nimport { useAuth } from '../context/AuthContext';\nimport API_BASE_URL from '../config.js';\n\nconst useUserCodService = () => {\n  const { token } = useAuth();\n\n  const getUserCods = async () => {\n    if (!token) {\n      throw new Error('No token available');\n    }\n\n    const response = await axios.get(`${API_BASE_URL}/user-cods/`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    return response.data;\n  };\n\n  return {\n    getUserCods,\n  };\n};\n\nexport default useUserCodService;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,wBAAwB;AAChD,OAAOC,YAAY,MAAM,cAAc;AAEvC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM;IAAEC;EAAM,CAAC,GAAGJ,OAAO,CAAC,CAAC;EAE3B,MAAMK,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACD,KAAK,EAAE;MACV,MAAM,IAAIE,KAAK,CAAC,oBAAoB,CAAC;IACvC;IAEA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAE,GAAEP,YAAa,aAAY,EAAE;MAC7DQ,OAAO,EAAE;QACPC,aAAa,EAAG,UAASN,KAAM;MACjC;IACF,CAAC,CAAC;IAEF,OAAOG,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED,OAAO;IACLN;EACF,CAAC;AACH,CAAC;AAACF,EAAA,CApBID,iBAAiB;EAAA,QACHF,OAAO;AAAA;AAqB3B,eAAeE,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}