{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useAuth } from '../context/AuthContext';\nconst useCheckCodService = cod => {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const checkCode = async () => {\n    if (!token) {\n      throw new Error('No token available');\n    }\n    const response = await axios.get(`https://api.locosporlapromo.com/check-cod/?cod=${cod}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  };\n  return {\n    checkCode\n  };\n};\n_s(useCheckCodService, \"ZpOvj47KCDv4EW5BIUHQHDAsr3M=\", false, function () {\n  return [useAuth];\n});\nexport default useCheckCodService;","map":{"version":3,"names":["axios","useAuth","useCheckCodService","cod","_s","token","checkCode","Error","response","get","headers","Authorization","data"],"sources":["/Users/diegojaramillo/Desktop/frontend-polla-copa-america/src/services/checkCodService.js"],"sourcesContent":["import axios from 'axios';\nimport { useAuth } from '../context/AuthContext';\n\nconst useCheckCodService = (cod) => {\n  const { token } = useAuth();\n\n  const checkCode = async () => {\n    if (!token) {\n      throw new Error('No token available');\n    }\n\n    const response = await axios.get(`https://api.locosporlapromo.com/check-cod/?cod=${cod}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    return response.data;\n  };\n\n  return {\n    checkCode,\n  };\n};\n\nexport default useCheckCodService;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,wBAAwB;AAEhD,MAAMC,kBAAkB,GAAIC,GAAG,IAAK;EAAAC,EAAA;EAClC,MAAM;IAAEC;EAAM,CAAC,GAAGJ,OAAO,CAAC,CAAC;EAE3B,MAAMK,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAACD,KAAK,EAAE;MACV,MAAM,IAAIE,KAAK,CAAC,oBAAoB,CAAC;IACvC;IAEA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAE,kDAAiDN,GAAI,EAAC,EAAE;MACxFO,OAAO,EAAE;QACPC,aAAa,EAAG,UAASN,KAAM;MACjC;IACF,CAAC,CAAC;IAEF,OAAOG,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED,OAAO;IACLN;EACF,CAAC;AACH,CAAC;AAACF,EAAA,CApBIF,kBAAkB;EAAA,QACJD,OAAO;AAAA;AAqB3B,eAAeC,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}