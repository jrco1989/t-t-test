{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useAuth } from '../context/AuthContext';\nconst useCheckCodService = () => {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const checkCode = async () => {\n    if (!token) {\n      throw new Error('No token available');\n    }\n    const response = await axios.get('https://api.locosporlapromo.com/check-cod/?cod=L61KH3', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  };\n  return {\n    getEvents\n  };\n};\n_s(useCheckCodService, \"ZpOvj47KCDv4EW5BIUHQHDAsr3M=\", false, function () {\n  return [useAuth];\n});\nexport default useEventService;","map":{"version":3,"names":["axios","useAuth","useCheckCodService","_s","token","checkCode","Error","response","get","headers","Authorization","data","getEvents","useEventService"],"sources":["/Users/diegojaramillo/Desktop/frontend-polla-copa-america/src/services/checkCodService.js"],"sourcesContent":["import axios from 'axios';\nimport { useAuth } from '../context/AuthContext';\n\nconst useCheckCodService = () => {\n  const { token } = useAuth();\n\n  const checkCode = async () => {\n    if (!token) {\n      throw new Error('No token available');\n    }\n\n    const response = await axios.get('https://api.locosporlapromo.com/check-cod/?cod=L61KH3', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    return response.data;\n  };\n\n  return {\n    getEvents,\n  };\n};\n\nexport default useEventService;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,wBAAwB;AAEhD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM;IAAEC;EAAM,CAAC,GAAGH,OAAO,CAAC,CAAC;EAE3B,MAAMI,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAACD,KAAK,EAAE;MACV,MAAM,IAAIE,KAAK,CAAC,oBAAoB,CAAC;IACvC;IAEA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,uDAAuD,EAAE;MACxFC,OAAO,EAAE;QACPC,aAAa,EAAG,UAASN,KAAM;MACjC;IACF,CAAC,CAAC;IAEF,OAAOG,QAAQ,CAACI,IAAI;EACtB,CAAC;EAED,OAAO;IACLC;EACF,CAAC;AACH,CAAC;AAACT,EAAA,CApBID,kBAAkB;EAAA,QACJD,OAAO;AAAA;AAqB3B,eAAeY,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}